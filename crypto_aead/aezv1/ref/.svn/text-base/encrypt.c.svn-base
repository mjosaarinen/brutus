#include "crypto_aead.h"
#include "api.h"

/*
#define CRYPTO_KEYBYTES 16
#define CRYPTO_NSECBYTES 0
#define CRYPTO_NPUBBYTES 12
#define CRYPTO_ABYTES 16
*/

typedef unsigned char byte;

int Decrypt(byte *Key, unsigned kbytes, byte *N, unsigned nbytes, byte *AD,
        unsigned adbytes, byte *C, unsigned cbytes, unsigned abytes, byte *M);
void Encrypt(byte *Key, unsigned kbytes, byte *N, unsigned nbytes, byte *AD,
        unsigned adbytes, byte *M, unsigned mbytes, unsigned abytes, byte *C);

int crypto_aead_encrypt(
    unsigned char *c,unsigned long long *clen,
    const unsigned char *m,unsigned long long mlen,
    const unsigned char *ad,unsigned long long adlen,
    const unsigned char *nsec,
    const unsigned char *npub,
    const unsigned char *k
)
{
    (void)nsec;
    if (clen) *clen = mlen+CRYPTO_ABYTES;
    Encrypt((byte *)k, CRYPTO_KEYBYTES, (byte *)npub, CRYPTO_NPUBBYTES, (byte *)ad, (unsigned)adlen, (byte *)m, (unsigned)mlen, CRYPTO_ABYTES, (byte *)c);
    return 0;
}

int crypto_aead_decrypt(
    unsigned char *m,unsigned long long *mlen,
    unsigned char *nsec,
    const unsigned char *c,unsigned long long clen,
    const unsigned char *ad,unsigned long long adlen,
    const unsigned char *npub,
    const unsigned char *k
)
{
    (void)nsec;
    if (mlen) *mlen = clen-CRYPTO_ABYTES;
    return Decrypt((byte *)k, CRYPTO_KEYBYTES, (byte *)npub, CRYPTO_NPUBBYTES, (byte *)ad, (unsigned)adlen, (byte *)c, (unsigned)clen, CRYPTO_ABYTES, (byte *)m);
}


#if 0

#include <stdio.h>
#include <string.h>

static void pbuf(byte *p, unsigned len, char *s)
{
    unsigned i;
    if (s) printf("%s", s);
    for (i = 0; i < len; i++)
        printf("%02X", (unsigned)(((unsigned char *)p)[i]));
    printf("\n");
}

int main() {
    
    byte Key[] = {1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6};
    byte N[]   = {1,2,3,4,5,6,7,8,9,10,11,12};
    unsigned i,j;
    
    for (i=0; i<=128; i++) {
        for (j=0; j<256; j++) {
            byte buf1[256], buf2[256], buf3[256];
            memset(buf1,j,i);
            crypto_aead_encrypt(buf2, NULL, buf1, i, buf1, i, NULL, N, Key);
            int invalid = crypto_aead_decrypt(buf3, NULL, NULL, buf2, i+CRYPTO_ABYTES, buf1, i, N, Key);
            if ( (invalid) || (memcmp(buf1,buf3,i)) ) printf("Invalid %d\n", i);
        }
    }
    
    return 0;
}

#endif
