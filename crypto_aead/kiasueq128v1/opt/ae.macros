#define ADD_TO_TWEAK(t,x) \
    t = permute(add64(permute(t,PERM_MASK),x), PERM_MASK_INVERSE);
    
#define LOAD_8_STATES( States , input ) \
 	States[0] = load( (__m128i *) ( input +   0 ) );\
	States[1] = load( (__m128i *) ( input +  16 ) );\
	States[2] = load( (__m128i *) ( input +  32 ) );\
	States[3] = load( (__m128i *) ( input +  48 ) );\
	States[4] = load( (__m128i *) ( input +  64 ) );\
	States[5] = load( (__m128i *) ( input +  80 ) );\
	States[6] = load( (__m128i *) ( input +  96 ) );\
	States[7] = load( (__m128i *) ( input + 112 ) );
	
#define STORE_8_STATES( States, output ) \
	store( output +   0 , States[0] );\
	store( output +  16 , States[1] );\
	store( output +  32 , States[2] );\
	store( output +  48 , States[3] );\
	store( output +  64 , States[4] );\
	store( output +  80 , States[5] );\
	store( output +  96 , States[6] );\
	store( output + 112 , States[7] );
	
#define XOR_8_STATES( States, Checksum ) \
	Checksum = xor ( Checksum, xor(States[0], xor(States[1], xor(States[2], xor(States[3], xor(States[4], xor(States[5], xor(States[6],States[7]))))))) ); 
	  
#define PROCESS_8_MESSAGE_BLOCKS( States, input , output, Checksum , Auth) \
	  LOAD_8_STATES ( States , input );    \
	  XOR_8_STATES  ( States, Checksum);       	    \
 	  SET_STAGES_IN_TWEAKS(Tweaks, MSB_M_UP);\
	  AES8        ( States, subkeys, Tweaks );	    \
	  States[0] = xor( Auth      , States[0] );\
	  States[1] = xor( States[0] , States[1] );\
	  States[2] = xor( States[1] , States[2] );\
	  States[3] = xor( States[2] , States[3] );\
	  States[4] = xor( States[3] , States[4] );\
	  States[5] = xor( States[4] , States[5] );\
	  States[6] = xor( States[5] , States[6] );\
	  States[7] = xor( States[6] , States[7] );\
	  Auth = States[7];\
 	  SET_STAGES_IN_TWEAKS(Tweaks, MSB_M_DOWN);\
	  AES8        ( States, subkeys, Tweaks );	    \
	  STORE_8_STATES( States, output );	

#define PROCESS_8_CIPHERTEXT_BLOCKS( States, subkeys, Tweaks, Tweaks_inv, input , output, Checksum , Auth ) \
	  LOAD_8_STATES ( States , input );    \
	  SET_STAGES_IN_TWEAKS(Tweaks, MSB_M_DOWN); \
	  GET_MC_INV_TWEAKS( Tweaks , Tweaks_inv);\
	  AES8_DEC      ( States, subkeys, Tweaks, Tweaks_inv );	    \
	  tmp = States[7];\
	  States[7] = xor( States[7] , States[6] );\
	  States[6] = xor( States[6] , States[5] );\
	  States[5] = xor( States[5] , States[4] );\
	  States[4] = xor( States[4] , States[3] );\
	  States[3] = xor( States[3] , States[2] );\
	  States[2] = xor( States[2] , States[1] );\
	  States[1] = xor( States[1] , States[0] );\
	  States[0] = xor( States[0] , Auth );\
	  Auth = tmp;\
          SET_STAGES_IN_TWEAKS(Tweaks, MSB_M_UP);\
	  GET_MC_INV_TWEAKS( Tweaks , Tweaks_inv);\
	  AES8_DEC      ( States, subkeys, Tweaks, Tweaks_inv );	    \
	  XOR_8_STATES  ( States, Checksum);       	    \
	  STORE_8_STATES( States, output );	

	  
#define PROCESS_8_ASS_DATA_BLOCKS( States, input , Auth) \
	  LOAD_8_STATES ( States , input );    \
	  AES8        ( States, subkeys, Tweaks );	    \
	  XOR_8_STATES  ( States, Auth );       	    
	  
	        

#define INCREASE_8_TWEAKS_SIMPLE( Tweaks ) \
      Tweaks[0] = add8( Tweaks[0] , EIGHT );\
      Tweaks[1] = add8( Tweaks[1] , EIGHT );\
      Tweaks[2] = add8( Tweaks[2] , EIGHT );\
      Tweaks[3] = add8( Tweaks[3] , EIGHT );\
      Tweaks[4] = add8( Tweaks[4] , EIGHT );\
      Tweaks[5] = add8( Tweaks[5] , EIGHT );\
      Tweaks[6] = add8( Tweaks[6] , EIGHT );\
      Tweaks[7] = add8( Tweaks[7] , EIGHT );
      
#define GET_TWEAKS_FROM_SINGLE_TWEAK( Tweaks, Tweak ) \
      Tweaks[0] = Tweak;\
      Tweaks[1] = add8( Tweaks[0] , ONE );\
      Tweaks[2] = add8( Tweaks[1] , ONE );\
      Tweaks[3] = add8( Tweaks[2] , ONE );\
      Tweaks[4] = add8( Tweaks[3] , ONE );\
      Tweaks[5] = add8( Tweaks[4] , ONE );\
      Tweaks[6] = add8( Tweaks[5] , ONE );\
      Tweaks[7] = add8( Tweaks[6] , ONE );

#define GET_MC_INV_TWEAKS( Tweaks, Tweaks_inv)\
	Tweaks_inv[0] = mc_inv( Tweaks[0] );\
	Tweaks_inv[1] = mc_inv( Tweaks[1] );\
	Tweaks_inv[2] = mc_inv( Tweaks[2] );\
	Tweaks_inv[3] = mc_inv( Tweaks[3] );\
	Tweaks_inv[4] = mc_inv( Tweaks[4] );\
	Tweaks_inv[5] = mc_inv( Tweaks[5] );\
	Tweaks_inv[6] = mc_inv( Tweaks[6] );\
	Tweaks_inv[7] = mc_inv( Tweaks[7] );




#define SET_STAGE_IN_TWEAK( Tw, bits )  Tw = xor ( and (Tw, STAGE_MASK), bits );

#define SET_STAGES_IN_TWEAKS( Tw , bits )\
	SET_STAGE_IN_TWEAK(Tweaks[0], bits);\
	SET_STAGE_IN_TWEAK(Tweaks[1], bits);\
	SET_STAGE_IN_TWEAK(Tweaks[2], bits);\
	SET_STAGE_IN_TWEAK(Tweaks[3], bits);\
	SET_STAGE_IN_TWEAK(Tweaks[4], bits);\
	SET_STAGE_IN_TWEAK(Tweaks[5], bits);\
	SET_STAGE_IN_TWEAK(Tweaks[6], bits);\
	SET_STAGE_IN_TWEAK(Tweaks[7], bits);

#define SET_BLOCK_NO_IN_TWEAK( Tw, block_no )\
    tmp = constant8( 0,0,0,0, 0,0,0,0,  \
    ((block_no) >> 24) & 0xf, ((block_no) >> 16) & 0xff, 0 , 0,\
    ((block_no) >>  8) & 0xff, ((block_no) >>  0) & 0xff, 0 , 0 );\
    Tw = xor ( and(Tw, BLOCK_MASK), tmp )      
